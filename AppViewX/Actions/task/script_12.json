{"uniqueId":"6j0Nj3BK","directoryUniqueId":"Sourcecon001","source":"USER_CREATED","tags":[],"userName":"admin","objectType":"TaskDetails","sourceControlSettings":{"committed":true,"pendingForPushAction":false,"pushActionCompleted":false,"enabledForRemoteRepository":true},"description":"","historyReferences":[],"usedHistory":null,"sampleInput":null,"sampleOutput":null,"contentTab":null,"successiveTasks":{"incoming":[{"taskId":"decision_2","taskName":null,"subflowId":"0LNa9nBd","parentSubflowId":"","taskType":"start","flowName":null,"linkType":null,"backwardLink":false}],"success":[{"taskId":"startLoop_2","taskName":null,"subflowId":"0LNa9nBd","parentSubflowId":"","taskType":"loop","flowName":null,"linkType":null,"backwardLink":false}]},"flowPathID":null,"ignoredForStatusComputation":false,"flowName":"","subFlowID":"0LNa9nBd","globalData":[{"name":"date_range_email_list","key":"date_range_email_list","value":"date_range_email_list","description":null,"dataType":"string","size":0,"variableType":"global","defaultValues":null,"mandatory":false,"showToolTip":false,"useDefaultValue":false,"variableDeclared":false,"variableUsed":false,"sourceTasks":null,"destinationTasks":null,"enableForIOVariables":true,"order":0,"label":"date_range_email_list","dataValidation":null,"notification":null,"elementType":null,"type":"Custom","_id":null},{"name":"date_range_temp_dict","key":"date_range_temp_dict","value":"date_range_temp_dict","description":null,"dataType":"string","size":0,"variableType":"global","defaultValues":null,"mandatory":false,"showToolTip":false,"useDefaultValue":false,"variableDeclared":false,"variableUsed":false,"sourceTasks":null,"destinationTasks":null,"enableForIOVariables":true,"order":0,"label":"date_range_temp_dict","dataValidation":null,"notification":null,"elementType":null,"type":"Custom","_id":null}],"input":[{"name":null,"key":"selected_fields","value":"<%selected_fields%>","description":null,"dataType":"Json","size":0,"variableType":"global","defaultValues":null,"mandatory":false,"showToolTip":false,"useDefaultValue":false,"variableDeclared":false,"variableUsed":false,"sourceTasks":null,"destinationTasks":null,"enableForIOVariables":true,"order":0,"label":"selected_fields","dataValidation":null,"notification":null,"elementType":null,"type":"Custom","_id":null},{"name":null,"key":"certsAssociated","value":"<%certsAssociated%>","description":null,"dataType":"Json","size":0,"variableType":"global","defaultValues":null,"mandatory":false,"showToolTip":false,"useDefaultValue":false,"variableDeclared":false,"variableUsed":false,"sourceTasks":null,"destinationTasks":null,"enableForIOVariables":true,"order":0,"label":"certsAssociated","dataValidation":null,"notification":null,"elementType":null,"type":"Custom","_id":null},{"name":null,"key":"check_csr_mail_group","value":"<%check_csr_mail_group%>","description":null,"dataType":"Json","size":0,"variableType":"global","defaultValues":null,"mandatory":false,"showToolTip":false,"useDefaultValue":false,"variableDeclared":false,"variableUsed":false,"sourceTasks":null,"destinationTasks":null,"enableForIOVariables":true,"order":0,"label":"check_csr_mail_group","dataValidation":null,"notification":null,"elementType":null,"type":"Custom","_id":null},{"name":null,"key":"enter_email","value":"<%enter_email%>","description":null,"dataType":"Json","size":0,"variableType":"global","defaultValues":null,"mandatory":false,"showToolTip":false,"useDefaultValue":false,"variableDeclared":false,"variableUsed":false,"sourceTasks":null,"destinationTasks":null,"enableForIOVariables":true,"order":0,"label":"enter_email","dataValidation":null,"notification":null,"elementType":null,"type":"Custom","_id":null}],"notificationMessage":{"0":"","1":"","2":""},"ancestor":null,"metaData":{"taskHeader":"Script","hide":false,"lock":false,"successState":1,"failoverState":2,"taskScope":null,"hideFromStageView":false,"mode":"Developer","nature":"normal","lowCodeTask":false},"parentSubFlowID":"","helpContent":null,"name":"","syncExecution":true,"_id":null,"task_id":"script_12","task_name":"Group by email for date range","task_type":"script","task_category":"script","component_type":"others","setNullProperties":true,"folderName":null,"sub_group":"script","group_name":"General","viewable_type":"custom","scriptType":"Python","scriptContent":"import sys\nimport json\nimport re\n\nsys.path.insert(0, AVX::DEPENDENCIES)\nsys.path.insert(0, AVX::HELPER)\n\nfrom collections import defaultdict\nfrom datetime import datetime\n\nfalse = False\ntrue = True\nnull = None\n\ncertsAssociated = '<%certsAssociated%>'\n\nuser_provided_email = '<%enter_email%>'\n\ncheck_csr_mail_group = '<%check_csr_mail_group%>'\nselected_fields = '<%selected_fields%>'\n\ncert_temp_list = []\n\nmapping = {\n    \"category\":\"Category\",\n    \"subjectOrganization\":\"Subject Organization\",\n    \"validFrom\":\"Valid From\",\n    \"keyUsage\":\"Key Usage\",\n    \"autoRenewDate\":\"Auto RenewDate\",\n    \"newConnectors\":\"New Connectors\",\n    \"subjectLocality\":\"Subject Locality\",\n    \"issuerOrganization\":\"Issuer Organization\",\n    \"validFor\":\"Valid For\",\n    \"issuerCountry\":\"Issuer Country\",\n    \"privatekeyAvaliable\":\"Privatekey Avaliable\",\n    \"extendedKeyUsage\":\"Extended Key Usage\",\n    \"issuerLocality\":\"Issuer Locality\",\n    \"basicConstraints\":\"Basic Constraints\",\n    \"subjectOrganizationUnit\":\"Subject Organization Unit\",\n    \"discoveredFileNames\":\"Discovered File Names\",\n    \"signatureHashAlgorithm\":\"Signature Hash Algorithm\",\n    \"mailAddress\":\"Mail Address\",\n    \"discoverySources\":\"Discovery Sources\",\n    \"subjectState\":\"Subject State\",\n    \"issuerOrganizationUnit\":\"Issuer Organization Unit\",\n    \"issuerState\":\"Issuer State\",\n    \"commonName\":\"Common Name\",\n    \"applications\":\"Applications\",\n    \"expiryStatus\":\"Expiry Status\",\n    \"type\":\"Type\",\n    \"validTo\":\"Valid To\",\n    \"authorityInfoAccess\":\"Authority Info Access\",\n    \"group\":\"Group\",\n    \"missingParamsForAutoRenew\":\"Missing Params For AutoRenew\",\n    \"issuerCommonName\":\"Issuer Common Name\",\n    \"version\":\"Version\",\n    \"authorityKeyIdentifier\":\"Authority Key Identifier\",\n    \"certificateAuthority\":\"Certificate Authority\",\n    \"complianceStatus\":\"Compliance Status\",\n    \"status\":\"Status\",\n    \"csrAvailable\":\"CSR Available\",\n    \"thumbPrint\":\"ThumbPrint\",\n    \"subjectAlternativeNames\":\"Subject Alternative Names\",\n    \"resourceId\":\"ResourceId\",\n    \"thumbprintAlgorithm\":\"Thumbprint Algorithm\",\n    \"serialNumber\":\"Serial Number\",\n    \"crlDistributionPoints\":\"Crl Distribution Points\",\n    \"signatureAlgorithm\":\"Signature Algorithm\",\n    \"subjectCountry\":\"Subject Country\",\n    \"keyAlgorithmAndSize\":\"Key Algorithm And Size\",\n    \"certificatePolicies\":\"Certificate Policies\",\n    \"associatedObjects\":\"Associated Profiles\",\n    \"suspendedCertificate\":\"Suspended Certificate\",\n    \"permission\":\"Permission\",\n    \"subjectKeyIdentifier\":\"Subject Key Identifier\"\n}\n\ndef get_certs_with_email():\n    \n    email_regex = '^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$'\n    \n    for cert in certsAssociated:\n        data = {}\n        email_data = {}\n        cert_attrib_email = ''\n        # AVX::LOG(str(selected_fields))\n        \n        for field in selected_fields:\n            if field in cert:\n                if field == 'validTo' or field == 'validFrom':\n                    data[mapping[field]] = datetime.fromtimestamp(int(cert[field])/1000).strftime('%d-%b-%Y')\n                elif field == 'associatedObjects':\n                    assoc_objects = []\n                    for assoc_obj in cert[field]:\n                        assoc_objects.append(assoc_obj.split(\":\")[2])\n                    assoc_objects = ','.join(assoc_objects)\n                    \n                    data[mapping[field]] = assoc_objects\n                else:\n                    data[mapping[field]] = str(cert[field])\n            else:\n                if \"certAttributes\" in cert:\n                    if field in cert[\"certAttributes\"]:\n                        cert_attrib = cert[\"certAttributes\"][field]\n                        # AVX::LOG(str(cert_attrib))\n                        if re.search(email_regex, cert_attrib):\n                            cert_attrib_email = cert_attrib\n                            data[field] = cert_attrib\n                            # AVX::LOG('>>>'+str(cert_attrib_email))\n                        else:\n                            data[field] = cert_attrib\n# ------\n\n        # AVX::LOG(\"Check email:\"+str(check_csr_mail_group))\n        if check_csr_mail_group==\"Yes\":\n            if \"mailAddress\" in cert and cert['mailAddress'] != '':\n                email_data['mail'] = cert['mailAddress']+\",\"+user_provided_email\n                if cert_attrib_email:\n                    email_data['mail'] += \",\"+str(cert_attrib_email)\n            else:\n                email_data['mail'] = user_provided_email\n                if cert_attrib_email:\n                    email_data['mail'] += \",\"+str(cert_attrib_email)\n        else:\n            email_data['mail'] = user_provided_email\n            if cert_attrib_email and user_provided_email:\n                    email_data['mail'] += \",\"+str(cert_attrib_email)\n            elif cert_attrib_email:\n                    email_data['mail'] = str(cert_attrib_email)\n                \n        # AVX::LOG('--->'+str(email_data['mail']))\n                \n        email_data['data'] = data\n        cert_temp_list.append(email_data)\n\ndef group_cert_on_email():\n    temp_dict = defaultdict(list)\n    for cert_data in cert_temp_list:\n        temp_dict[cert_data['mail']].append(cert_data['data'])\n    return temp_dict\n\nif __name__ == '__main__':\n    get_certs_with_email()\n    temp_dict = group_cert_on_email()\n    email_list = temp_dict.keys() if temp_dict.keys() else \"<%enter_email%>\"\n    # for i in temp_dict.items():\n    #     AVX::LOG(i)\n    AVX::OUTPUT({\"date_range_email_list\":list(email_list),\"date_range_temp_dict\":temp_dict})","http_method":"POST","action_id":"run-script"}